


function getPrimitiveDataType(obj) {
  var primitiveTypes = {
    '[object String]':'string',
    '[object Number]':'number',
    '[object Boolean]':'boolean',
    '[object Null]':'null',
    '[object Undefined]':'undefined',
    '[object Symbol]':'symbol',
  };
  var objTypeName = Object.prototype.toString.call(obj);
  //如果objTypeName在原子类型列表中，返回原子类型名称，否则返回"object".
  return !!primitiveTypes[objTypeName] ? primitiveTypes[objTypeName]:'object';
}
//should return an array of strings => ["string", "number", "boolean", "null", "undefined", "symbol", "object"];

exports.getPrimitiveDataType = getPrimitiveDataType;



// `true` or `false`
function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}

exports.isObject = isObject;

function isString(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
}

exports.isString = isString;

function isNumber(obj) {
  return Object.prototype.toString.call(obj) === '[object Number]';
}

exports.isNumber = isNumber;

function isBoolean(obj) {
  return Object.prototype.toString.call(obj) === '[object Boolean]';
}

exports.isBoolean = isBoolean;

function isSymbol(obj) {
  return Object.prototype.toString.call(obj) === '[object Symbol]';
}

exports.isSymbol = isSymbol;

function isFunction(obj) {
  return Object.prototype.toString.call(obj) === '[object Function]';
}

exports.isFunction = isFunction;

function isArray(obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
}

exports.isArray = isArray;

